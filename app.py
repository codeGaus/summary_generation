import streamlit as st
import numpy as np
# from saiga import model, tokenizer, generation_config, conversation, generate
from words_cloud import create_wordcloud_file
from file_handler import convert_to_txt


# streamlit run app.py

def generate_response(conversation):
    '''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –õ–õ–ú'''
    # prompt = conversation.get_prompt(tokenizer)
    # with open('data/tmp/promt.txt', 'w+') as f:
    #     f.write(prompt)
    # output = generate(
    #     model=model,
    #     tokenizer=tokenizer,
    #     prompt=prompt,
    #     generation_config=generation_config
    # )
    output = '''
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏ –∏ –±–∏–∑–Ω–µ—Å–∞.

    –ì–ª–∞–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã:

    1) –†–∞–∑–≤–∏—Ç–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ 5 –º–æ–¥–µ–ª–µ–π (–æ—Ç 10 –¥–æ 15).
    2) –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ—Å—Ç —Ö–æ—Ç—è –±—ã –Ω–∞ 5% –∑–∞ –∑–æ–ª–æ—Ç–æ.
    3) –í–µ—Ä—É –≤ –∫–æ–º–∞–Ω–¥—É –∏ –º–µ—á—Ç—É.
    4) –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.
    5) –†–∞–∑–≤–∏—Ç–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ –∫—Ä—É–ø–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–π.
    6) –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ —Ü–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    7) –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –°–±–µ—Ä–∞.
    8) –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
    '''
    return output

# –ö–æ–Ω—Ñ–∏–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title='üßô‚Äç‚ôÇÔ∏è‚ú® –ö–æ–º–∞–Ω–¥–∞ "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–µ–π—Ä–æ–º–∞–≥–∏"',
    page_icon="üßô‚Äç‚ôÇÔ∏è",
    initial_sidebar_state="expanded",
)
st.title('Summary Generationüìù')

# –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
def set_example_text(number):
    if number == '3':
        if uploaded_file is not None:
            bytes_data = uploaded_file.read()
            with open(f'data/tmp/files/{uploaded_file.name}', 'wb') as f:
                f.write(bytes_data)
            text = convert_to_txt(f'data/tmp/files/{uploaded_file.name}', 'data/tmp/file_text.txt')
        else:
            text = ''
    else:
        with open(f'data/examples/demo_example_text{number}.txt', encoding='utf-8') as f:
            text = f.read()
    st.session_state.example_text = text

col1, col2, col3, *cols = st.columns(6)
with col1:
    btn_example_1 = st.button('–ü—Ä–∏–º–µ—Ä 1', on_click=set_example_text, args=['1'])
with col2:
    btn_example_2 = st.button('–ü—Ä–∏–º–µ—Ä 2', on_click=set_example_text, args=['2'])
with col3:
    btn_example_3 = st.button('–§–∞–π–ª', on_click=set_example_text, args=['3'])

uploaded_file = st.file_uploader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞')


# –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
with st.sidebar:
    st.write("### ‚úÖ Task:")
    st.info("–†–µ—à–µ–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è—é—â–µ–µ –Ω–∞ –±–∞–∑–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–∞–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≤–µ—â–∞–Ω–∏—è/—Å–æ–±—Ä–∞–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç.")

    st.write("### ü¶å LLM:")
    st.info("saiga_mistral_7b")

    st.divider()

    st.write("### üë®‚Äçüíª Developed by:")
    st.info('–ö–æ–º–∞–Ω–¥–∞ –†–¢ –õ–∞–±—Å üßô‚Äç‚ôÇÔ∏è‚ú®"–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–µ–π—Ä–æ–º–∞–≥–∏"')

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
txt_input = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Å–æ–±—Ä–∞–Ω–∏—è:', '',
                         height=275, key='example_text')

col1, col2, col3 = st.columns(3)
with col2:
    button_submit = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—ÇüìÑ")

# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
if button_submit:
    # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
    with open('data/prompts/summarize.txt', encoding='utf-8') as f:
        sum_prompt = f.read()
    # –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ç–µ–∫—Å—Ç—É
    txt_input = sum_prompt + txt_input

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç+—Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    with open('data/tmp/last_request.txt', 'w', encoding='utf-8') as f:
        f.write(txt_input)

    # conversation.add_user_message(txt_input)

    container = st.container()
    header = container.empty()
    header.write("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    placeholders = []
    for i in range(3):
        placeholder = container.empty()
        placeholders.append(placeholder)

    placeholders[0].status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
    placeholders[1].status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤...")
    placeholders[2].status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã...")

    # =============== Summary generation =============== 
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
    response = generate_response(conversation=None)
    # response = '–û–¢–í–ï–ï–ï–ï–ï–ï–¢–¢–¢–¢–¢–¢–¢–¢–¢'
    create_wordcloud_file(txt_input)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    with open('data/tmp/last_response.txt', 'w', encoding='utf-8') as f:
        f.write(response)

    # =============== Diagram generation =============== 
    # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ json-—Ñ–æ—Ä–º–∞—Ç
    # with open('data/prompts/to_json.txt') as f:
    #     json_prompt = f.read()
    # conversation.add_user_message(json_prompt + response)

    # json_response = generate_response(conversation)

    # # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    # with open('data/tmp/last_json.txt', 'w') as f:
    #     f.write(json_response)

    # =============== –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ =============== 
    placeholders[0].info(response)
    placeholders[1].image('data/wordscloud_data/wordcloud.png', caption='–û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å–æ–≤–µ—â–∞–Ω–∏—è')
    with placeholders[2]:
        col1, col2, col3 = st.columns(3)
        with col2:
            with open('data/diagram/graph.drawio', encoding='utf-8') as f:
                st.download_button('–°–∫–∞—á–∞—Ç—å mind-map –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–æ–≤–µ—â–∞–Ω–∏—è', f,
                                   file_name='mindmap.drawio')

    header.write("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    # st.write(response)
